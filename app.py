import streamlit as st
import random
import requests
from datetime import datetime
import re

# ---------------------- STREAMLIT CONFIG ----------------------
st.set_page_config(
    page_title="ЁЯМ╛ Krishisaathi AI", 
    page_icon="ЁЯМ▒", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---------------------- TRANSLATION SETUP ----------------------
try:
    from deep_translator import GoogleTranslator
    TRANSLATION_AVAILABLE = True
except ImportError:
    TRANSLATION_AVAILABLE = False
    st.warning("тЪая╕П Translation library not available. Install: pip install deep-translator")

# ---------------------- LANGUAGE CONFIGURATION ----------------------
SUPPORTED_LANGUAGES = {
    'en': {'name': 'English', 'flag': 'ЁЯЗмЁЯЗз'},
    'hi': {'name': 'рд╣рд┐рдиреНрджреА', 'flag': 'ЁЯЗоЁЯЗ│'},
    'mr': {'name': 'рдорд░рд╛рдареА', 'flag': 'ЁЯЗоЁЯЗ│'},
    'ta': {'name': 'родрооро┐ро┤рпН', 'flag': 'ЁЯЗоЁЯЗ│'},
    'te': {'name': 'р░др▒Жр░▓р▒Бр░Чр▒Б', 'flag': 'ЁЯЗоЁЯЗ│'},
    'bn': {'name': 'ржмрж╛ржВрж▓рж╛', 'flag': 'ЁЯЗоЁЯЗ│'},
    'gu': {'name': 'ркЧрлБркЬрк░рк╛ркдрлА', 'flag': 'ЁЯЗоЁЯЗ│'},
    'kn': {'name': 'р▓Хр▓ир│Нр▓ир▓б', 'flag': 'ЁЯЗоЁЯЗ│'},
    'ml': {'name': 'р┤ор┤▓р┤пр┤╛р┤│р┤В', 'flag': 'ЁЯЗоЁЯЗ│'},
    'pa': {'name': 'рикрй░риЬри╛римрйА', 'flag': 'ЁЯЗоЁЯЗ│'}
}

# ---------------------- UI TEXT TRANSLATIONS ----------------------
UI_TRANSLATIONS = {
    'en': {
        'app_title': 'KRISHISAATHI AI',
        'app_tagline': 'Connecting Farmers, Empowering Growth',
        'select_language': 'Select Your Language',
        'quick_actions': 'ЁЯОп Quick Actions',
        'disease_detection': 'ЁЯУ╖ Disease Detection',
        'delhi_prices': 'ЁЯПЩя╕П Delhi Prices',
        'mumbai_weather': 'ЁЯМдя╕П Mumbai Weather',
        'crop_tips': 'ЁЯМ╛ Crop Tips',
        'clear_chat': 'ЁЯЧСя╕П Clear Chat',
        'upload_image': 'ЁЯУ╕ Upload Crop Image',
        'choose_image': 'Choose an image',
        'uploaded_image': 'Uploaded Image',
        'analyzing': 'ЁЯФм Analyzing...',
        'detection_complete': 'тЬЕ Detection Complete!',
        'disease': 'Disease',
        'confidence': 'Confidence',
        'done': 'тЬЕ Done',
        'chat_placeholder': 'Ask about farming...',
        'thinking': 'ЁЯМ▒ Thinking...',
        'footer_title': 'ЁЯМ╛ Krishisaathi AI',
        'footer_tagline': 'Empowering Farmers with Technology',
        'footer_copyright': '┬й 2025 Krishisaathi AI. All rights reserved.',
        'smart_assistant': 'Smart Farming Assistant',
        'show_prices': 'Show prices in',
        'weather_in': 'Weather in',
        'tell_about': 'Tell me about wheat',
        'check_disease': 'Check crop disease'
    },
    'hi': {
        'app_title': 'рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдИ',
        'app_tagline': 'рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рдЬреЛрдбрд╝рдирд╛, рд╡рд┐рдХрд╛рд╕ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛',
        'select_language': 'рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
        'quick_actions': 'ЁЯОп рддреНрд╡рд░рд┐рдд рдХрд╛рд░реНрдп',
        'disease_detection': 'ЁЯУ╖ рд░реЛрдЧ рдкрд╣рдЪрд╛рди',
        'delhi_prices': 'ЁЯПЩя╕П рджрд┐рд▓реНрд▓реА рдХреА рдХреАрдорддреЗрдВ',
        'mumbai_weather': 'ЁЯМдя╕П рдореБрдВрдмрдИ рдХрд╛ рдореМрд╕рдо',
        'crop_tips': 'ЁЯМ╛ рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡',
        'clear_chat': 'ЁЯЧСя╕П рдЪреИрдЯ рд╕рд╛рдл рдХрд░реЗрдВ',
        'upload_image': 'ЁЯУ╕ рдлрд╕рд▓ рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'choose_image': 'рдПрдХ рддрд╕реНрд╡реАрд░ рдЪреБрдиреЗрдВ',
        'uploaded_image': 'рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рддрд╕реНрд╡реАрд░',
        'analyzing': 'ЁЯФм рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣реЗ рд╣реИрдВ...',
        'detection_complete': 'тЬЕ рдкрд╣рдЪрд╛рди рдкреВрд░реНрдг!',
        'disease': 'рд░реЛрдЧ',
        'confidence': 'рд╡рд┐рд╢реНрд╡рд╛рд╕',
        'done': 'тЬЕ рдкреВрд░реНрдг',
        'chat_placeholder': 'рдЦреЗрддреА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...',
        'thinking': 'ЁЯМ▒ рд╕реЛрдЪ рд░рд╣реЗ рд╣реИрдВ...',
        'footer_title': 'ЁЯМ╛ рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдИ',
        'footer_tagline': 'рдкреНрд░реМрджреНрдпреЛрдЧрд┐рдХреА рд╕реЗ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛',
        'footer_copyright': '┬й 2025 рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдИред рд╕рд░реНрд╡рд╛рдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред',
        'smart_assistant': 'рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рд╕рд╣рд╛рдпрдХ',
        'show_prices': 'рдХреАрдорддреЗрдВ рджрд┐рдЦрд╛рдПрдВ',
        'weather_in': 'рдореМрд╕рдо',
        'tell_about': 'рдЧреЗрд╣реВрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        'check_disease': 'рдлрд╕рд▓ рд░реЛрдЧ рдЬрд╛рдВрдЪреЗрдВ'
    },
    'mr': {
        'app_title': 'рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдп',
        'app_tagline': 'рд╢реЗрддрдХрд▒реНрдпрд╛рдВрдирд╛ рдЬреЛрдбрдгреЗ, рд╡рд╛рдвреАрд╕ рд╕рдХреНрд╖рдо рдХрд░рдгреЗ',
        'select_language': 'рддреБрдордЪреА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛',
        'quick_actions': 'ЁЯОп рдЬрд▓рдж рдХреНрд░рд┐рдпрд╛',
        'disease_detection': 'ЁЯУ╖ рд░реЛрдЧ рдУрд│рдЦ',
        'delhi_prices': 'ЁЯПЩя╕П рджрд┐рд▓реНрд▓реА рдХрд┐рдорддреА',
        'mumbai_weather': 'ЁЯМдя╕П рдореБрдВрдмрдИ рд╣рд╡рд╛рдорд╛рди',
        'crop_tips': 'ЁЯМ╛ рдкреАрдХ рд╕реВрдЪрдирд╛',
        'clear_chat': 'ЁЯЧСя╕П рдЪреЕрдЯ рд╕рд╛рдл рдХрд░рд╛',
        'upload_image': 'ЁЯУ╕ рдкрд┐рдХрд╛рдЪрд╛ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛',
        'choose_image': 'рдПрдХ рдкреНрд░рддрд┐рдорд╛ рдирд┐рд╡рдбрд╛',
        'uploaded_image': 'рдЕрдкрд▓реЛрдб рдХреЗрд▓реЗрд▓реА рдкреНрд░рддрд┐рдорд╛',
        'analyzing': 'ЁЯФм рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...',
        'detection_complete': 'тЬЕ рдУрд│рдЦ рдкреВрд░реНрдг!',
        'disease': 'рд░реЛрдЧ',
        'confidence': 'рд╡рд┐рд╢реНрд╡рд╛рд╕',
        'done': 'тЬЕ рдкреВрд░реНрдг',
        'chat_placeholder': 'рд╢реЗрддреАрдмрджреНрджрд▓ рд╡рд┐рдЪрд╛рд░рд╛...',
        'thinking': 'ЁЯМ▒ рд╡рд┐рдЪрд╛рд░ рдХрд░рдд рдЖрд╣реЗ...',
        'footer_title': 'ЁЯМ╛ рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдп',
        'footer_tagline': 'рддрдВрддреНрд░рдЬреНрдЮрд╛рдирд╛рджреНрд╡рд╛рд░реЗ рд╢реЗрддрдХрд▒реНрдпрд╛рдВрдирд╛ рд╕рдХреНрд╖рдо рдХрд░рдгреЗ',
        'footer_copyright': '┬й 2025 рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдп. рд╕рд░реНрд╡ рд╣рдХреНрдХ рд░рд╛рдЦреАрд╡.',
        'smart_assistant': 'рд╕реНрдорд╛рд░реНрдЯ рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ',
        'show_prices': 'рдХрд┐рдорддреА рджрд╛рдЦрд╡рд╛',
        'weather_in': 'рд╣рд╡рд╛рдорд╛рди',
        'tell_about': 'рдЧрд╡реНрд╣рд╛рдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        'check_disease': 'рдкреАрдХ рд░реЛрдЧ рддрдкрд╛рд╕рд╛'
    },
    'ta': {
        'app_title': 'роХро┐ро░рпБро╖ро┐роЪро╛родрпНродро┐ AI',
        'app_tagline': 'ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИ роЗрогрпИродрпНродро▓рпН, ро╡ро│ро░рпНроЪрпНроЪро┐ропрпИ роорпЗроорпНрокроЯрпБродрпНродрпБродро▓рпН',
        'select_language': 'роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
        'quick_actions': 'ЁЯОп ро╡ро┐ро░рпИро╡рпБ роЪрпЖропро▓рпНроХро│рпН',
        'disease_detection': 'ЁЯУ╖ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН',
        'delhi_prices': 'ЁЯПЩя╕П роЯрпЖро▓рпНро▓ро┐ ро╡ро┐ро▓рпИроХро│рпН',
        'mumbai_weather': 'ЁЯМдя╕П роорпБроорпНрокрпИ ро╡ро╛ройро┐ро▓рпИ',
        'crop_tips': 'ЁЯМ╛ рокропро┐ро░рпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН',
        'clear_chat': 'ЁЯЧСя╕П роЕро░роЯрпНроЯрпИропрпИ роЕро┤ро┐',
        'upload_image': 'ЁЯУ╕ рокропро┐ро░рпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН',
        'choose_image': 'рокроЯродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
        'uploaded_image': 'рокродро┐ро╡рпЗро▒рпНро▒рокрпНрокроЯрпНроЯ рокроЯроорпН',
        'analyzing': 'ЁЯФм рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...',
        'detection_complete': 'тЬЕ роХрогрпНроЯро▒ро┐родро▓рпН роорпБроЯро┐роирпНродродрпБ!',
        'disease': 'роирпЛропрпН',
        'confidence': 'роироорпНрокро┐роХрпНроХрпИ',
        'done': 'тЬЕ роорпБроЯро┐роирпНродродрпБ',
        'chat_placeholder': 'ро╡ро┐ро╡роЪро╛ропроорпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН...',
        'thinking': 'ЁЯМ▒ роЪро┐роирпНродро┐роХрпНроХро┐ро▒родрпБ...',
        'footer_title': 'ЁЯМ╛ роХро┐ро░рпБро╖ро┐роЪро╛родрпНродро┐ AI',
        'footer_tagline': 'родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокродрпНродрпБроЯройрпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИ роорпЗроорпНрокроЯрпБродрпНродрпБродро▓рпН',
        'footer_copyright': '┬й 2025 роХро┐ро░рпБро╖ро┐роЪро╛родрпНродро┐ AI. роЕройрпИродрпНродрпБ роЙро░ро┐роорпИроХро│рпБроорпН рокро╛родрпБроХро╛роХрпНроХрокрпНрокроЯрпНроЯро╡рпИ.',
        'smart_assistant': 'ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН',
        'show_prices': 'ро╡ро┐ро▓рпИроХро│рпИроХрпН роХро╛роЯрпНроЯрпБ',
        'weather_in': 'ро╡ро╛ройро┐ро▓рпИ',
        'tell_about': 'роХрпЛродрпБроорпИ рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        'check_disease': 'рокропро┐ро░рпН роирпЛропрпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН'
    },
    'te': {
        'app_title': 'р░Хр▒Гр░╖р░┐р░╕р░╛р░ер░┐ AI',
        'app_tagline': 'р░░р▒Ир░др▒Бр░▓р░ир▒Б р░Хр░▓р▒Бр░кр▒Бр░др▒В, р░╡р▒Гр░жр▒Нр░зр░┐р░ир░┐ р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В р░Ър▒Зр░пр░бр░В',
        'select_language': 'р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
        'quick_actions': 'ЁЯОп р░др▒Нр░╡р░░р░┐р░д р░Ър░░р▒Нр░пр░▓р▒Б',
        'disease_detection': 'ЁЯУ╖ р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б',
        'delhi_prices': 'ЁЯПЩя╕П р░вр░┐р░▓р▒Нр░▓р▒А р░зр░░р░▓р▒Б',
        'mumbai_weather': 'ЁЯМдя╕П р░ор▒Бр░Вр░мр▒И р░╡р░╛р░др░╛р░╡р░░р░гр░В',
        'crop_tips': 'ЁЯМ╛ р░кр░Вр░Я р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б',
        'clear_chat': 'ЁЯЧСя╕П р░Ър░╛р░Яр▒Н р░Хр▒Нр░▓р░┐р░пр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'upload_image': 'ЁЯУ╕ р░кр░Вр░Я р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'choose_image': 'р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
        'uploaded_image': 'р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и р░Ър░┐р░др▒Нр░░р░В',
        'analyzing': 'ЁЯФм р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...',
        'detection_complete': 'тЬЕ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐!',
        'disease': 'р░╡р▒Нр░пр░╛р░зр░┐',
        'confidence': 'р░╡р░┐р░╢р▒Нр░╡р░╛р░╕р░В',
        'done': 'тЬЕ р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐',
        'chat_placeholder': 'р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░Вр░бр░┐...',
        'thinking': 'ЁЯМ▒ р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...',
        'footer_title': 'ЁЯМ╛ р░Хр▒Гр░╖р░┐р░╕р░╛р░ер░┐ AI',
        'footer_tagline': 'р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░др░др▒Л р░░р▒Ир░др▒Бр░▓р░ир▒Б р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В р░Ър▒Зр░пр░бр░В',
        'footer_copyright': '┬й 2025 р░Хр▒Гр░╖р░┐р░╕р░╛р░ер░┐ AI. р░Ер░ир▒Нр░ир░┐ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒В р░░р░Хр▒Нр░╖р░┐р░Вр░Ър░мр░бр▒Нр░бр░╛р░пр░┐.',
        'smart_assistant': 'р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б',
        'show_prices': 'р░зр░░р░▓р░ир▒Б р░Ър▒Вр░кр░┐р░Вр░Ър▒Б',
        'weather_in': 'р░╡р░╛р░др░╛р░╡р░░р░гр░В',
        'tell_about': 'р░Чр▒Лр░зр▒Бр░ор░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        'check_disease': 'р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐р░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐'
    },
    'bn': {
        'app_title': 'ржХрзГрж╖рж┐рж╕рж╛ржерзА AI',
        'app_tagline': 'ржХрзГрж╖ржХржжрзЗрж░ рж╕ржВржпрзЛржЧ, ржмрзГржжрзНржзрж┐ржХрзЗ ржХрзНрж╖ржорждрж╛ржпрж╝ржи',
        'select_language': 'ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'quick_actions': 'ЁЯОп ржжрзНрж░рзБржд ржХрзНрж░рж┐ржпрж╝рж╛',
        'disease_detection': 'ЁЯУ╖ рж░рзЛржЧ рж╕ржирж╛ржХрзНрждржХрж░ржг',
        'delhi_prices': 'ЁЯПЩя╕П ржжрж┐рж▓рзНрж▓рж┐рж░ ржжрж╛ржо',
        'mumbai_weather': 'ЁЯМдя╕П ржорзБржорзНржмрж╛ржЗ ржЖржмрж╣рж╛ржУржпрж╝рж╛',
        'crop_tips': 'ЁЯМ╛ ржлрж╕рж▓рзЗрж░ ржЯрж┐ржкрж╕',
        'clear_chat': 'ЁЯЧСя╕П ржЪрзНржпрж╛ржЯ ржорзБржЫрзБржи',
        'upload_image': 'ЁЯУ╕ ржлрж╕рж▓рзЗрж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
        'choose_image': 'ржПржХржЯрж┐ ржЫржмрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'uploaded_image': 'ржЖржкрж▓рзЛржб ржХрж░рж╛ ржЫржмрж┐',
        'analyzing': 'ЁЯФм ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...',
        'detection_complete': 'тЬЕ рж╕ржирж╛ржХрзНрждржХрж░ржг рж╕ржорзНржкрзВрж░рзНржг!',
        'disease': 'рж░рзЛржЧ',
        'confidence': 'ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕',
        'done': 'тЬЕ рж╕ржорзНржкржирзНржи',
        'chat_placeholder': 'ржХрзГрж╖рж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...',
        'thinking': 'ЁЯМ▒ ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрзЗ...',
        'footer_title': 'ЁЯМ╛ ржХрзГрж╖рж┐рж╕рж╛ржерзА AI',
        'footer_tagline': 'ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ рж╕рж╛ржерзЗ ржХрзГрж╖ржХржжрзЗрж░ ржХрзНрж╖ржорждрж╛ржпрж╝ржи',
        'footer_copyright': '┬й 2025 ржХрзГрж╖рж┐рж╕рж╛ржерзА AI. рж╕ржорж╕рзНржд ржЕржзрж┐ржХрж╛рж░ рж╕ржВрж░ржХрзНрж╖рж┐рждред',
        'smart_assistant': 'рж╕рзНржорж╛рж░рзНржЯ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХ',
        'show_prices': 'ржжрж╛ржо ржжрзЗржЦрж╛ржи',
        'weather_in': 'ржЖржмрж╣рж╛ржУржпрж╝рж╛',
        'tell_about': 'ржЧржо рж╕ржорзНржкрж░рзНржХрзЗ ржмрж▓рзБржи',
        'check_disease': 'ржлрж╕рж▓ рж░рзЛржЧ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи'
    },
    'gu': {
        'app_title': 'ркХрлГрк╖рк┐рк╕рк╛ркерлА AI',
        'app_tagline': 'ркЦрлЗркбрлВркдрлЛркирлЗ ркЬрлЛркбрк╡рк╛, рк╡рлГркжрлНркзрк┐ркирлЗ рк╕рк╢ркХрлНркд ркмркирк╛рк╡рк╡рлА',
        'select_language': 'ркдркорк╛рк░рлА ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ',
        'quick_actions': 'ЁЯОп ркЭркбрккрлА ркХрлНрк░рк┐ркпрк╛ркУ',
        'disease_detection': 'ЁЯУ╖ рк░рлЛркЧ рк╢рлЛркз',
        'delhi_prices': 'ЁЯПЩя╕П ркжрк┐рк▓рлНрк╣рлА ркнрк╛рк╡',
        'mumbai_weather': 'ЁЯМдя╕П ркорлБркВркмркИ рк╣рк╡рк╛ркорк╛рки',
        'crop_tips': 'ЁЯМ╛ рккрк╛ркХ ркЯрлАрккрлНрк╕',
        'clear_chat': 'ЁЯЧСя╕П ркЪрлЗркЯ рк╕рк╛ркл ркХрк░рлЛ',
        'upload_image': 'ЁЯУ╕ рккрк╛ркХркирлБркВ ркЪрк┐ркдрлНрк░ ркЕрккрк▓рлЛркб ркХрк░рлЛ',
        'choose_image': 'ркПркХ ркЫркмрлА рккрк╕ркВркж ркХрк░рлЛ',
        'uploaded_image': 'ркЕрккрк▓рлЛркб ркХрк░рлЗрк▓ ркЫркмрлА',
        'analyzing': 'ЁЯФм рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...',
        'detection_complete': 'тЬЕ рк╢рлЛркз рккрлВрк░рлНркг!',
        'disease': 'рк░рлЛркЧ',
        'confidence': 'рк╡рк┐рк╢рлНрк╡рк╛рк╕',
        'done': 'тЬЕ рккрлВрк░рлНркг',
        'chat_placeholder': 'ркЦрлЗркдрлА рк╡рк┐рк╢рлЗ рккрлВркЫрлЛ...',
        'thinking': 'ЁЯМ▒ рк╡рк┐ркЪрк╛рк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...',
        'footer_title': 'ЁЯМ╛ ркХрлГрк╖рк┐рк╕рк╛ркерлА AI',
        'footer_tagline': 'ркЯрлЗркХркирлЛрк▓рлЛркЬрлА рк╕рк╛ркерлЗ ркЦрлЗркбрлВркдрлЛркирлЗ рк╕рк╢ркХрлНркд ркмркирк╛рк╡рк╡рк╛',
        'footer_copyright': '┬й 2025 ркХрлГрк╖рк┐рк╕рк╛ркерлА AI. ркмркзрк╛ ркЕркзрк┐ркХрк╛рк░рлЛ ркЕркирк╛ркоркд.',
        'smart_assistant': 'рк╕рлНркорк╛рк░рлНркЯ ркЦрлЗркдрлА рк╕рк╣рк╛ркпркХ',
        'show_prices': 'ркнрк╛рк╡ ркмркдрк╛рк╡рлЛ',
        'weather_in': 'рк╣рк╡рк╛ркорк╛рки',
        'tell_about': 'ркШркЙркВ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        'check_disease': 'рккрк╛ркХ рк░рлЛркЧ ркдрккрк╛рк╕рлЛ'
    },
    'kn': {
        'app_title': 'р▓Хр│Гр▓╖р▓┐р▓╕р▓╛р▓ер▓┐ AI',
        'app_tagline': 'р▓░р│Ир▓др▓░р▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б, р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓пр▓ир│Нр▓ир│Б р▓╕р▓╢р▓Хр│Нр▓др▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б',
        'select_language': 'р▓ир▓┐р▓ор│Нр▓о р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
        'quick_actions': 'ЁЯОп р▓др│Нр▓╡р▓░р▓┐р▓д р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр▓│р│Б',
        'disease_detection': 'ЁЯУ╖ р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж',
        'delhi_prices': 'ЁЯПЩя╕П р▓жр│Жр▓╣р▓▓р▓┐ р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б',
        'mumbai_weather': 'ЁЯМдя╕П р▓ор│Бр▓Вр▓мр│И р▓╣р▓╡р▓╛р▓ор▓╛р▓и',
        'crop_tips': 'ЁЯМ╛ р▓мр│Жр▓│р│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б',
        'clear_chat': 'ЁЯЧСя╕П р▓Ър▓╛р▓Яр│Н р▓др│Жр▓░р▓╡р│Бр▓Чр│Кр▓│р▓┐р▓╕р▓┐',
        'upload_image': 'ЁЯУ╕ р▓мр│Жр▓│р│Ж р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐',
        'choose_image': 'р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
        'uploaded_image': 'р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐р▓ж р▓Ър▓┐р▓др│Нр▓░',
        'analyzing': 'ЁЯФм р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
        'detection_complete': 'тЬЕ р▓кр▓др│Нр▓др│Ж р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓бр▓┐р▓жр│Ж!',
        'disease': 'р▓░р│Лр▓Ч',
        'confidence': 'р▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕',
        'done': 'тЬЕ р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓бр▓┐р▓жр│Ж',
        'chat_placeholder': 'р▓Хр│Гр▓╖р▓┐ р▓мр▓Чр│Нр▓Чр│Ж р▓Хр│Зр▓│р▓┐...',
        'thinking': 'ЁЯМ▒ р▓пр│Лр▓Ър▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
        'footer_title': 'ЁЯМ╛ р▓Хр│Гр▓╖р▓┐р▓╕р▓╛р▓ер▓┐ AI',
        'footer_tagline': 'р▓др▓Вр▓др│Нр▓░р▓Ьр│Нр▓Юр▓╛р▓ир▓жр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓░р│Ир▓др▓░р▓ир│Нр▓ир│Б р▓╕р▓╢р▓Хр│Нр▓др▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б',
        'footer_copyright': '┬й 2025 р▓Хр│Гр▓╖р▓┐р▓╕р▓╛р▓ер▓┐ AI. р▓Ор▓▓р│Нр▓▓р▓╛ р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр▓╛р▓пр│Нр▓жр▓┐р▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж.',
        'smart_assistant': 'р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓Хр│Гр▓╖р▓┐ р▓╕р▓╣р▓╛р▓пр▓Х',
        'show_prices': 'р▓мр│Жр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др│Лр▓░р▓┐р▓╕р▓┐',
        'weather_in': 'р▓╣р▓╡р▓╛р▓ор▓╛р▓и',
        'tell_about': 'р▓Чр│Лр▓зр▓┐ р▓мр▓Чр│Нр▓Чр│Ж р▓╣р│Зр▓│р▓┐',
        'check_disease': 'р▓мр│Жр▓│р│Ж р▓░р│Лр▓Чр▓╡р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐'
    },
    'ml': {
        'app_title': 'р┤Хр╡Гр┤╖р┤┐р┤╕р┤╛р┤ер┤┐ AI',
        'app_tagline': 'р┤Хр╡╝р┤╖р┤Хр┤░р╡Ж р┤мр┤ир╡Нр┤зр┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡╜, р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤пр╡Ж р┤╢р┤╛р┤Хр╡Нр┤др╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡╜',
        'select_language': 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
        'quick_actions': 'ЁЯОп р┤кр╡Жр┤Яр╡Нр┤Яр╡Жр┤ир╡Нр┤ир╡Бр┤│р╡Нр┤│ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Щр╡Нр┤Щр╡╛',
        'disease_detection': 'ЁЯУ╖ р┤░р╡Лр┤Чр┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡╜',
        'delhi_prices': 'ЁЯПЩя╕П р┤бр╡╜р┤╣р┤┐ р┤╡р┤┐р┤▓р┤Хр╡╛',
        'mumbai_weather': 'ЁЯМдя╕П р┤ор╡Бр┤Вр┤мр╡И р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е',
        'crop_tips': 'ЁЯМ╛ р┤╡р┤┐р┤│ р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛',
        'clear_chat': 'ЁЯЧСя╕П р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н р┤ор┤╛р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х',
        'upload_image': 'ЁЯУ╕ р┤╡р┤┐р┤│ р┤Ър┤┐р┤др╡Нр┤░р┤В р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х',
        'choose_image': 'р┤Тр┤░р╡Б р┤Ър┤┐р┤др╡Нр┤░р┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
        'uploaded_image': 'р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д р┤Ър┤┐р┤др╡Нр┤░р┤В',
        'analyzing': 'ЁЯФм р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤ир┤Яр┤др╡Нр┤др╡Бр┤ир╡Нр┤ир╡Б...',
        'detection_complete': 'тЬЕ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡╜ р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤пр┤┐!',
        'disease': 'р┤░р╡Лр┤Чр┤В',
        'confidence': 'р┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕р┤В',
        'done': 'тЬЕ р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤пр┤┐',
        'chat_placeholder': 'р┤Хр╡Гр┤╖р┤┐р┤пр╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...',
        'thinking': 'ЁЯМ▒ р┤Ър┤┐р┤ир╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...',
        'footer_title': 'ЁЯМ╛ р┤Хр╡Гр┤╖р┤┐р┤╕р┤╛р┤ер┤┐ AI',
        'footer_tagline': 'р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Хр┤╡р┤┐р┤жр╡Нр┤пр┤пр┤┐р┤▓р╡Вр┤Яр╡Ж р┤Хр╡╝р┤╖р┤Хр┤░р╡Ж р┤╢р┤╛р┤Хр╡Нр┤др╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡╜',
        'footer_copyright': '┬й 2025 р┤Хр╡Гр┤╖р┤┐р┤╕р┤╛р┤ер┤┐ AI. р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤┐р┤др┤В.',
        'smart_assistant': 'р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤Хр╡Гр┤╖р┤┐ р┤╕р┤╣р┤╛р┤пр┤┐',
        'show_prices': 'р┤╡р┤┐р┤▓р┤Хр╡╛ р┤Хр┤╛р┤гр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х',
        'weather_in': 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е',
        'tell_about': 'р┤Чр╡Лр┤др┤ор╡Нр┤кр┤┐р┤ир╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤кр┤▒р┤пр╡Бр┤Х',
        'check_disease': 'р┤╡р┤┐р┤│ р┤░р╡Лр┤Чр┤В р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х'
    },
    'pa': {
        'app_title': 'риХрйНри░ри┐ри╕ри╝рйАри╕ри╛риерйА AI',
        'app_tagline': 'риХри┐ри╕ри╛риири╛риВ риирйВрй░ риЬрйЛрйЬриири╛, ри╡ри┐риХри╛ри╕ риирйВрй░ ри╕ри╕ри╝риХрид римригри╛риЙригри╛',
        'select_language': 'риЖрикригрйА ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ',
        'quick_actions': 'ЁЯОп ридрйЗриЬри╝ риХри╛ри░ри╡ри╛риИриЖриВ',
        'disease_detection': 'ЁЯУ╖ римри┐риори╛ри░рйА рикриЫри╛риг',
        'delhi_prices': 'ЁЯПЩя╕П рижри┐рй▒ри▓рйА риХрйАриоридри╛риВ',
        'mumbai_weather': 'ЁЯМдя╕П риорйБрй░римриИ риорйМри╕рио',
        'crop_tips': 'ЁЯМ╛ рилри╕ри▓ ри╕рйБриЭри╛риЕ',
        'clear_chat': 'ЁЯЧСя╕П риЪрйИриЯ ри╕ри╛рилри╝ риХри░рйЛ',
        'upload_image': 'ЁЯУ╕ рилри╕ри▓ рижрйА ридри╕ри╡рйАри░ риЕрй▒рикри▓рйЛриб риХри░рйЛ',
        'choose_image': 'риЗрй▒риХ ридри╕ри╡рйАри░ риЪрйБригрйЛ',
        'uploaded_image': 'риЕрй▒рикри▓рйЛриб риХрйАридрйА ридри╕ри╡рйАри░',
        'analyzing': 'ЁЯФм ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░ ри░ри╣рйЗ ри╣ри╛риВ...',
        'detection_complete': 'тЬЕ рикриЫри╛риг рикрйВри░рйА!',
        'disease': 'римри┐риори╛ри░рйА',
        'confidence': 'ри╡ри┐ри╕ри╝ри╡ри╛ри╕',
        'done': 'тЬЕ рикрйВри░ри╛',
        'chat_placeholder': 'риЦрйЗридрйА римри╛ри░рйЗ рикрйБрй▒риЫрйЛ...',
        'thinking': 'ЁЯМ▒ ри╕рйЛриЪ ри░ри╣рйЗ ри╣ри╛риВ...',
        'footer_title': 'ЁЯМ╛ риХрйНри░ри┐ри╕ри╝рйАри╕ри╛риерйА AI',
        'footer_tagline': 'ридриХриири╛ри▓рйЛриЬрйА риири╛ри▓ риХри┐ри╕ри╛риири╛риВ риирйВрй░ ри╕ри╕ри╝риХрид римригри╛риЙригри╛',
        'footer_copyright': '┬й 2025 риХрйНри░ри┐ри╕ри╝рйАри╕ри╛риерйА AI. ри╕ри╛ри░рйЗ риЕризри┐риХри╛ри░ ри░ри╛риЦри╡рйЗриВ.',
        'smart_assistant': 'ри╕риори╛ри░риЯ риЦрйЗридрйА ри╕ри╣ри╛риЗриХ',
        'show_prices': 'риХрйАриоридри╛риВ рижри┐риЦри╛риУ',
        'weather_in': 'риорйМри╕рио',
        'tell_about': 'риХригриХ римри╛ри░рйЗ рижрй▒ри╕рйЛ',
        'check_disease': 'рилри╕ри▓ римри┐риори╛ри░рйА риЬри╛риВриЪрйЛ'
    }
}

def get_ui_text(key, lang='en'):
    """Get translated UI text"""
    return UI_TRANSLATIONS.get(lang, UI_TRANSLATIONS['en']).get(key, UI_TRANSLATIONS['en'][key])

# ---------------------- TRANSLATION FUNCTIONS ----------------------
def translate_text(text, target_lang='en', source_lang='auto'):
    """Translate text to target language"""
    if not TRANSLATION_AVAILABLE or target_lang == 'en':
        return text
    
    try:
        translator = GoogleTranslator(source='auto', target=target_lang)
        return translator.translate(text)
    except Exception as e:
        return text

def get_greeting_by_language(lang_code):
    """Return appropriate greeting based on language"""
    greetings = {
        'en': 'Namaste! Welcome to Krishisaathi AI!',
        'hi': 'рдирдорд╕реНрддреЗ! рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдИ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!',
        'mr': 'рдирдорд╕реНрдХрд╛рд░! рдХреГрд╖рд┐рд╕рд╛рдереА рдПрдЖрдп рдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ!',
        'ta': 'ро╡рогроХрпНроХроорпН! роХро┐ро░рпБро╖ро┐роЪро╛родрпНродро┐ AI-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!',
        'te': 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░Хр▒Гр░╖р░┐р░╕р░╛р░ер░┐ AI р░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В!',
        'bn': 'ржиржорж╕рзНржХрж╛рж░! ржХрзГрж╖рж┐рж╕рж╛ржерзА AI рждрзЗ рж╕рзНржмрж╛ржЧрждржо!',
        'gu': 'ркиркорк╕рлНркдрлЗ! ркХрлГрк╖рк┐рк╕рк╛ркерлА AI ркорк╛ркВ ркдркорк╛рк░рлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!',
        'kn': 'р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓Хр│Гр▓╖р▓┐р▓╕р▓╛р▓ер▓┐ AI р▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д!',
        'ml': 'р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Хр╡Гр┤╖р┤┐р┤╕р┤╛р┤ер┤┐ AI р┤пр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В!',
        'pa': 'ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риХрйНри░ри┐ри╕ри╝рйАри╕ри╛риерйА AI ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕рйБриЖриЧрид ри╣рйИ!'
    }
    return greetings.get(lang_code, greetings['en'])

# ---------------------- CSS ----------------------
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700;800&display=swap');
    
    * {
        font-family: 'Plus Jakarta Sans', sans-serif;
    }
    
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    [data-testid="stToolbar"] {display: none;}
    
    .main {
        background: #1a1a1a;
        padding: 0;
    }
    
    .block-container {
        padding: 2rem 3rem !important;
        max-width: 1400px !important;
        margin: 0 auto;
    }
    
    .language-selector {
        background: linear-gradient(135deg, #2d2d2d 0%, #1f1f1f 100%);
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        border: 1px solid #4caf50;
    }
    
    .stChatMessage {
        background: linear-gradient(135deg, #2d2d2d 0%, #242424 100%) !important;
        border-radius: 12px !important;
        border: 1px solid #4caf50 !important;
        margin-bottom: 1rem !important;
        padding: 1.25rem !important;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3) !important;
    }
    
    .stChatMessage p, .stChatMessage div {
        color: #e0e0e0 !important;
    }
    
    .stChatMessage strong {
        color: #66bb6a !important;
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 1.75rem;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.25);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.35);
    }
    
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #1f1f1f 0%, #2d2d2d 100%) !important;
        border-right: 2px solid #4caf50 !important;
    }
    
    [data-testid="stSidebar"] * {
        color: #e0e0e0 !important;
    }
    
    [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 {
        color: #66bb6a !important;
    }
    
    .app-title {
        font-size: 2rem;
        font-weight: 800;
        color: #2e7d32;
        margin: 0;
        letter-spacing: -0.5px;
    }
    
    .app-tagline {
        color: #81c784;
        font-size: 0.95rem;
        font-weight: 500;
        margin: 0.25rem 0 0 0;
    }
    
    .stTextInput input, .stChatInput textarea {
        background: #2d2d2d !important;
        color: #e0e0e0 !important;
        border: 1px solid #4caf50 !important;
        border-radius: 10px !important;
    }
    
    .stTextInput input:focus, .stChatInput textarea:focus {
        border-color: #66bb6a !important;
        box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2) !important;
    }
    
    .stChatInput {
        background: transparent !important;
    }
    
    .stChatInput > div {
        background: #2d2d2d !important;
        border: 2px solid #4caf50 !important;
        border-radius: 12px !important;
        padding: 0 !important;
    }
    
    .stChatInput textarea {
        padding: 1rem 1.5rem !important;
        min-height: 50px !important;
        font-size: 0.95rem !important;
    }
    
    .stChatInput button {
        background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%) !important;
        border: none !important;
        border-radius: 8px !important;
        margin: 4px !important;
        padding: 0.5rem 1rem !important;
    }
    
    .stChatInput button:hover {
        background: linear-gradient(135deg, #66bb6a 0%, #81c784 100%) !important;
        transform: scale(1.05);
    }
    
    [data-testid="stFileUploader"] {
        background: #2d2d2d !important;
        border: 2px dashed #4caf50 !important;
        border-radius: 12px !important;
        padding: 2rem !important;
    }
    
    [data-testid="stFileUploader"] * {
        color: #e0e0e0 !important;
    }
    
    [data-testid="stMetric"] {
        background: linear-gradient(135deg, #2d2d2d 0%, #242424 100%) !important;
        border: 1px solid #4caf50 !important;
        border-radius: 10px !important;
        padding: 1rem !important;
    }
    
    [data-testid="stMetric"] * {
        color: #e0e0e0 !important;
    }
    
    [data-testid="stMetricLabel"] {
        color: #81c784 !important;
    }
    
    .stSelectbox select {
        background: #2d2d2d !important;
        color: #e0e0e0 !important;
        border: 1px solid #4caf50 !important;
    }
    
    .stSpinner > div {
        border-top-color: #66bb6a !important;
    }
    
    hr {
        border-color: #4caf50 !important;
        opacity: 0.3;
    }
</style>
""", unsafe_allow_html=True)

# ---------------------- INITIALIZE SESSION ----------------------
if "messages" not in st.session_state:
    st.session_state.messages = []
if "user_location" not in st.session_state:
    st.session_state.user_location = None
if "expect_image" not in st.session_state:
    st.session_state.expect_image = False
if "selected_language" not in st.session_state:
    st.session_state.selected_language = 'en'

# Get current language
current_lang = st.session_state.selected_language

# ---------------------- HEADER ----------------------
header_col1, header_col2 = st.columns([1, 5])

with header_col1:
    st.markdown('<div style="font-size: 4rem; text-align: center;">ЁЯМ╛</div>', unsafe_allow_html=True)

with header_col2:
    st.markdown(f"""
    <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
        <h1 class="app-title">{get_ui_text('app_title', current_lang)}</h1>
        <p class="app-tagline">{get_ui_text('app_tagline', current_lang)}</p>
    </div>
    """, unsafe_allow_html=True)

st.markdown('<hr>', unsafe_allow_html=True)

# ---------------------- LANGUAGE SELECTOR ----------------------
st.markdown('<div class="language-selector">', unsafe_allow_html=True)
col_lang1, col_lang2 = st.columns([3, 1])

with col_lang1:
    st.markdown(f"**ЁЯМН {get_ui_text('select_language', current_lang)}**")

with col_lang2:
    selected_lang = st.selectbox(
        "Language",
        options=list(SUPPORTED_LANGUAGES.keys()),
        format_func=lambda x: f"{SUPPORTED_LANGUAGES[x]['flag']} {SUPPORTED_LANGUAGES[x]['name']}",
        index=list(SUPPORTED_LANGUAGES.keys()).index(st.session_state.selected_language),
        label_visibility="collapsed"
    )
    
    if selected_lang != st.session_state.selected_language:
        st.session_state.selected_language = selected_lang
        st.rerun()

st.markdown('</div>', unsafe_allow_html=True)

# ---------------------- WEATHER FUNCTION ----------------------
def get_weather(city):
    """Fetches real-time weather data"""
    API_KEY = "bc072ed23f5983aac7f32d666efe49af"
    BASE_URL = "http://api.openweathermap.org/data/2.5/weather"
    
    try:
        params = {"q": city, "appid": API_KEY, "units": "metric"}
        response = requests.get(BASE_URL, params=params, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            return {
                "city": data["name"],
                "temperature": data["main"]["temp"],
                "feels_like": data["main"]["feels_like"],
                "humidity": data["main"]["humidity"],
                "description": data["weather"][0]["description"],
                "wind_speed": data["wind"]["speed"]
            }
    except:
        pass
    return None

# ---------------------- DISEASE DETECTION ----------------------
def ai_predict_disease(image_file):
    """Placeholder for future ML model"""
    diseases = {
        "Tomato - Late Blight": {
            "symptoms": "Dark brown spots on leaves, white mold on undersides",
            "treatment": "Remove infected leaves, apply copper-based fungicide, improve air circulation",
            "prevention": "Avoid overhead watering, use resistant varieties"
        },
        "Potato - Early Blight": {
            "symptoms": "Circular brown spots with concentric rings on older leaves",
            "treatment": "Apply fungicide (Mancozeb), remove infected leaves",
            "prevention": "Crop rotation, proper spacing, mulching"
        },
        "Healthy Crop": {
            "symptoms": "No disease detected",
            "treatment": "Continue regular care and monitoring",
            "prevention": "Maintain good agricultural practices"
        }
    }
    
    disease_name = random.choice(list(diseases.keys()))
    disease_info = diseases[disease_name]
    
    return {
        "name": disease_name,
        "confidence": random.randint(75, 98),
        **disease_info
    }

# ---------------------- PRICE FUNCTION (shortened for space) ----------------------
def get_produce_prices(state="all"):
    """Sample prices - using abbreviated version"""
    sample_prices = {
        "Delhi": {
            "Tomato": {"price": "тВ╣22-36", "unit": "per kg", "trend": "тЖУ"},
            "Potato": {"price": "тВ╣14-24", "unit": "per kg", "trend": "тЖТ"},
            "Onion": {"price": "тВ╣15-23", "unit": "per kg", "trend": "тЖУ"},
        },
        "Mumbai": {
            "Tomato": {"price": "тВ╣26-40", "unit": "per kg", "trend": "тЖУ"},
            "Potato": {"price": "тВ╣18-28", "unit": "per kg", "trend": "тЖТ"},
            "Onion": {"price": "тВ╣17-26", "unit": "per kg", "trend": "тЖУ"},
        }
    }
    
    if state.lower() == "all":
        return sample_prices
    else:
        matched_cities = {}
        search_term = state.lower()
        
        for city, prices in sample_prices.items():
            if search_term in city.lower():
                matched_cities[city] = prices
        
        return matched_cities if matched_cities else None

# ---------------------- EXTRACT CITY ----------------------
def extract_city_and_vegetable_from_message(message):
    """Extracts both city name and vegetable name from user message"""
    message_lower = message.lower()
    
    city = None
    city_patterns = [
        r"(?:in|at|for)\s+([a-zA-Z\s]+?)(?:\s+price|\s+market|$)",
        r"([a-zA-Z]+)\s+(?:price|weather|market)",
    ]
    
    for pattern in city_patterns:
        match = re.search(pattern, message_lower)
        if match:
            potential_city = match.group(1).strip()
            potential_city = re.sub(r'\b(today|tomorrow|now|current|latest|price|prices|weather)\b', '', potential_city).strip()
            if potential_city and len(potential_city) > 2:
                city = potential_city
                break
    
    vegetable = None
    produce_list = ["tomato", "potato", "onion", "cabbage"]
    
    for produce in produce_list:
        if produce in message_lower:
            vegetable = produce
            break
    
    return city, vegetable

# ---------------------- FORMAT PRICE RESPONSE ----------------------
def format_price_response(prices, city_name=None, vegetable_name=None):
    """Formats price data into readable response"""
    if not prices:
        return "тЭМ Sorry, no price data found. Try: Delhi or Mumbai."
    
    response = "ЁЯТ░ **Current Market Prices:**\n\n"
    
    for city, produce_data in prices.items():
        if city_name and city_name.lower() not in city.lower():
            continue
        
        response += f"ЁЯУН **{city}**\n\n"
        
        if vegetable_name:
            found = False
            for item, data in produce_data.items():
                if vegetable_name.lower() in item.lower():
                    response += f"тАв **{item}**: {data['price']} {data['unit']} {data['trend']}\n"
                    found = True
            
            if not found:
                response += f"тЭМ {vegetable_name.title()} price not available for {city}\n"
        else:
            for item, data in produce_data.items():
                response += f"тАв **{item}**: {data['price']} {data['unit']} {data['trend']}\n"
        
        response += "\n"
    
    response += "\nЁЯУК **Legend:** тЖТ Rising | тЖТ Stable | тЖУ Falling\n"
    
    return response

# ---------------------- MULTILINGUAL KEYWORD DETECTION ----------------------
def detect_intent_multilingual(user_message):
    """Detect user intent from multilingual input"""
    # Translate user message to English for intent detection
    if TRANSLATION_AVAILABLE:
        try:
            translator = GoogleTranslator(source='auto', target='en')
            message_en = translator.translate(user_message).lower()
        except:
            message_en = user_message.lower()
    else:
        message_en = user_message.lower()
    
    # Also check original message
    message_lower = user_message.lower()
    
    # Multilingual keywords for each intent
    disease_keywords = {
        'en': ['disease', 'sick', 'infected', 'diagnose', 'problem', 'leaf'],
        'hi': ['рд░реЛрдЧ', 'рдмреАрдорд╛рд░', 'рд╕рдВрдХреНрд░рдорд┐рдд', 'рдкрддреНрддреА', 'рд╕рдорд╕реНрдпрд╛'],
        'mr': ['рд░реЛрдЧ', 'рдЖрдЬрд╛рд░реА', 'рд╕рдВрдХреНрд░рдорд┐рдд', 'рдкрд╛рди', 'рд╕рдорд╕реНрдпрд╛'],
        'ta': ['роирпЛропрпН', 'роирпЛропрпБро▒рпНро▒', 'родрпКро▒рпНро▒рпБ', 'роЗро▓рпИ', 'рокро┐ро░роЪрпНроЪройрпИ'],
        'te': ['р░╡р▒Нр░пр░╛р░зр░┐', 'р░Ер░ир░╛р░░р▒Лр░Чр▒Нр░пр░В', 'р░╕р▒Лр░Хр░┐р░и', 'р░Жр░Хр▒Б', 'р░╕р░ор░╕р▒Нр░п'],
        'bn': ['рж░рзЛржЧ', 'ржЕрж╕рзБрж╕рзНрже', 'рж╕ржВржХрзНрж░ржорж┐ржд', 'ржкрж╛рждрж╛', 'рж╕ржорж╕рзНржпрж╛'],
        'gu': ['рк░рлЛркЧ', 'ркмрлАркорк╛рк░', 'ркЪрлЗрккркЧрлНрк░рк╕рлНркд', 'рккрк╛рки', 'рк╕ркорк╕рлНркпрк╛'],
        'kn': ['р▓░р│Лр▓Ч', 'р▓Ер▓ир▓╛р▓░р│Лр▓Чр│Нр▓п', 'р▓╕р│Лр▓Вр▓Хр│Б', 'р▓Ор▓▓р│Ж', 'р▓╕р▓ор▓╕р│Нр▓пр│Ж'],
        'ml': ['р┤░р╡Лр┤Чр┤В', 'р┤Ер┤╕р╡Бр┤Цр┤В', 'р┤░р╡Лр┤Чр┤мр┤╛р┤з', 'р┤Зр┤▓', 'р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В'],
        'pa': ['римри┐риори╛ри░рйА', 'римрйАриори╛ри░', 'ри╕рй░риХри░риори┐рид', 'рикрй▒ридри╛', 'ри╕риорй▒ри╕ри┐риЖ']
    }
    
    price_keywords = {
        'en': ['price', 'cost', 'market', 'rate', 'mandi'],
        'hi': ['рдХреАрдордд', 'рджрд╛рдо', 'рдмрд╛рдЬрд╛рд░', 'рдордВрдбреА', 'рднрд╛рд╡'],
        'mr': ['рдХрд┐рдВрдордд', 'рджрд░', 'рдмрд╛рдЬрд╛рд░', 'рдордВрдбреА'],
        'ta': ['ро╡ро┐ро▓рпИ', 'роЪроирпНродрпИ', 'ро╡рпАродроорпН'],
        'te': ['р░зр░░', 'р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н', 'р░ор░Вр░бр░┐'],
        'bn': ['ржжрж╛ржо', 'ржмрж╛ржЬрж╛рж░', 'ржоржгрзНржбрж┐'],
        'gu': ['ркХрк┐ркВркоркд', 'ркмркЬрк╛рк░', 'ркоркВркбрлА'],
        'kn': ['р▓мр│Жр▓▓р│Ж', 'р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж', 'р▓ор▓Вр▓бр▓┐'],
        'ml': ['р┤╡р┤┐р┤▓', 'р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н', 'р┤ор┤гр╡Нр┤бр┤┐'],
        'pa': ['риХрйАриорид', 'римри╛риЬри╝ри╛ри░', 'риорй░рибрйА']
    }
    
    weather_keywords = {
        'en': ['weather', 'temperature', 'rain', 'climate'],
        'hi': ['рдореМрд╕рдо', 'рддрд╛рдкрдорд╛рди', 'рдмрд╛рд░рд┐рд╢', 'рдЬрд▓рд╡рд╛рдпреБ'],
        'mr': ['рд╣рд╡рд╛рдорд╛рди', 'рддрд╛рдкрдорд╛рди', 'рдкрд╛рдКрд╕'],
        'ta': ['ро╡ро╛ройро┐ро▓рпИ', 'ро╡рпЖрокрпНрокроиро┐ро▓рпИ', 'рооро┤рпИ'],
        'te': ['р░╡р░╛р░др░╛р░╡р░░р░гр░В', 'р░Йр░╖р▒Нр░гр▒Лр░Чр▒Нр░░р░д', 'р░╡р░░р▒Нр░╖р░В'],
        'bn': ['ржЖржмрж╣рж╛ржУржпрж╝рж╛', 'рждрж╛ржкржорж╛рждрзНрж░рж╛', 'ржмрзГрж╖рзНржЯрж┐'],
        'gu': ['рк╣рк╡рк╛ркорк╛рки', 'ркдрк╛рккркорк╛рки', 'рк╡рк░рк╕рк╛ркж'],
        'kn': ['р▓╣р▓╡р▓╛р▓ор▓╛р▓и', 'р▓др▓╛р▓кр▓ор▓╛р▓и', 'р▓ор▓│р│Ж'],
        'ml': ['р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е', 'р┤др┤╛р┤кр┤ир┤┐р┤▓', 'р┤ор┤┤'],
        'pa': ['риорйМри╕рио', 'ридри╛рикриори╛рии', 'риорйАриВри╣']
    }
    
    crop_keywords = {
        'en': ['wheat', 'rice', 'crop', 'farming', 'cultivation', 'grow'],
        'hi': ['рдЧреЗрд╣реВрдВ', 'рдЪрд╛рд╡рд▓', 'рдлрд╕рд▓', 'рдЦреЗрддреА', 'рдЙрдЧрд╛рдирд╛'],
        'mr': ['рдЧрд╣реВ', 'рднрд╛рдд', 'рдкреАрдХ', 'рд╢реЗрддреА'],
        'ta': ['роХрпЛродрпБроорпИ', 'роЕро░ро┐роЪро┐', 'рокропро┐ро░рпН', 'ро╡ро┐ро╡роЪро╛ропроорпН'],
        'te': ['р░Чр▒Лр░зр▒Бр░о', 'р░╡р░░р░┐', 'р░кр░Вр░Я', 'р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В'],
        'bn': ['ржЧржо', 'ржЪрж╛рж▓', 'ржлрж╕рж▓', 'ржЪрж╛рж╖'],
        'gu': ['ркШркЙркВ', 'ркЪрлЛркЦрк╛', 'рккрк╛ркХ', 'ркЦрлЗркдрлА'],
        'kn': ['р▓Чр│Лр▓зр▓┐', 'р▓Ер▓Хр│Нр▓Хр▓┐', 'р▓мр│Жр▓│р│Ж', 'р▓Хр│Гр▓╖р▓┐'],
        'ml': ['р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н', 'р┤Ер┤░р┤┐', 'р┤╡р┤┐р┤│', 'р┤Хр╡Гр┤╖р┤┐'],
        'pa': ['риХригриХ', 'риЪрйМри▓', 'рилри╕ри▓', 'риЦрйЗридрйА']
    }
    
    greeting_keywords = {
        'en': ['hello', 'hi', 'hey', 'namaste', 'start'],
        'hi': ['рдирдорд╕реНрддреЗ', 'рд╣реИрд▓реЛ', 'рд╣рд╛рдп', 'рд╢реБрд░реВ'],
        'mr': ['рдирдорд╕реНрдХрд╛рд░', 'рд╣реЕрд▓реЛ', 'рд╕реБрд░реВ'],
        'ta': ['ро╡рогроХрпНроХроорпН', 'ро╣ро▓рпЛ', 'родрпКроЯроЩрпНроХрпБ'],
        'te': ['р░ир░ор░╕р▒Нр░Хр░╛р░░р░В', 'р░╣р░▓р▒Л', 'р░кр▒Нр░░р░╛р░░р░Вр░нр░В'],
        'bn': ['ржиржорж╕рзНржХрж╛рж░', 'рж╣рзНржпрж╛рж▓рзЛ', 'рж╢рзБрж░рзБ'],
        'gu': ['ркиркорк╕рлНркдрлЗ', 'рк╣рлЗрк▓рлЛ', 'рк╢рк░рлВ'],
        'kn': ['р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░', 'р▓╣р▓▓р│Л', 'р▓кр│Нр▓░р▓╛р▓░р▓Вр▓н'],
        'ml': ['р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В', 'р┤╣р┤▓р╡Л', 'р┤Жр┤░р┤Вр┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х'],
        'pa': ['ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓', 'ри╣рйИри▓рйЛ', 'ри╕ри╝рйБри░рйВ']
    }
    
    # Check for disease intent
    for lang_keywords in disease_keywords.values():
        if any(keyword in message_lower for keyword in lang_keywords):
            return 'disease'
    if any(word in message_en for word in disease_keywords['en']):
        return 'disease'
    
    # Check for price intent
    for lang_keywords in price_keywords.values():
        if any(keyword in message_lower for keyword in lang_keywords):
            return 'price'
    if any(word in message_en for word in price_keywords['en']):
        return 'price'
    
    # Check for weather intent
    for lang_keywords in weather_keywords.values():
        if any(keyword in message_lower for keyword in lang_keywords):
            return 'weather'
    if any(word in message_en for word in weather_keywords['en']):
        return 'weather'
    
    # Check for crop tips intent
    for lang_keywords in crop_keywords.values():
        if any(keyword in message_lower for keyword in lang_keywords):
            return 'crop'
    if any(word in message_en for word in crop_keywords['en']):
        return 'crop'
    
    # Check for greeting intent
    for lang_keywords in greeting_keywords.values():
        if any(keyword in message_lower for keyword in lang_keywords):
            return 'greeting'
    if any(word in message_en for word in greeting_keywords['en']):
        return 'greeting'
    
    return 'default'

# ---------------------- CHATBOT RESPONSE LOGIC ----------------------
def get_bot_response(user_message, user_lang='en'):
    """Generates intelligent responses with multilingual understanding"""
    
    # Translate user message to English for processing
    message_en = user_message
    if TRANSLATION_AVAILABLE and user_lang != 'en':
        try:
            translator = GoogleTranslator(source='auto', target='en')
            message_en = translator.translate(user_message)
        except:
            pass
    
    # Detect intent from multilingual input
    intent = detect_intent_multilingual(user_message)
    response_en = ""
    
    if intent == 'disease':
        st.session_state.expect_image = True
        response_en = """ЁЯФм **Crop Disease Detection**

ЁЯУ╖ Please upload a clear photo of affected leaves or crops.

I'll analyze it and provide:
тЬЕ Disease identification
тЬЕ Treatment recommendations
тЬЕ Prevention tips"""
    
    elif intent == 'price':
        city, vegetable = extract_city_and_vegetable_from_message(message_en)
        
        if city:
            prices = get_produce_prices(city)
            if prices:
                response_en = format_price_response(prices, city, vegetable)
            else:
                response_en = f"тЭМ Sorry, I don't have price data for '{city}'. Try: Delhi or Mumbai."
        else:
            response_en = """ЁЯТ░ **Market Prices Available!**

ЁЯПЖ **Cities Covered:** Delhi, Mumbai, and more!

ЁЯТм **Ask me:** 
тАв "Tomato price in Mumbai"
тАв "Show onion prices in Delhi"

ЁЯФН Type your city and vegetable name!"""
    
    elif intent == 'weather':
        city, _ = extract_city_and_vegetable_from_message(message_en)
        
        if not city:
            response_en = "ЁЯФН Please specify a location!\nExample: 'Weather in Delhi'"
        else:
            weather = get_weather(city)
            if weather:
                response_en = f"""ЁЯМдя╕П **Weather in {weather['city']}:**
            
- Temperature: {weather['temperature']}┬░C (feels like {weather['feels_like']}┬░C)
- Conditions: {weather['description'].title()}
- Humidity: {weather['humidity']}%
- Wind: {weather['wind_speed']} m/s

**Advice:** {"Good for outdoor work! ЁЯМЮ" if weather['temperature'] > 15 else "Indoor tasks recommended. ЁЯзе"}"""
            else:
                response_en = f"тЭМ Couldn't fetch weather for '{city}'."
    
    elif intent == 'crop':
        response_en = """ЁЯМ╛ **Wheat Cultivation Guide**

**Climate:** 10-25┬░C, 50-75 cm rainfall
**Soil:** Well-drained loamy soil, pH 6.0-7.0
**Planting:** October-November, 100-125 kg/hectare
**Irrigation:** 4-6 times during critical stages
**Harvesting:** 120-150 days

ЁЯТб **Tips:** Use certified seeds, crop rotation, proper drainage"""
    
    elif intent == 'greeting':
        response_en = f"""{get_greeting_by_language(user_lang)}

I can help you with:
ЁЯМдя╕П Weather forecasts
ЁЯТ░ Market prices
ЁЯМ╛ Crop cultivation tips
ЁЯФм Disease detection (upload photo)

**What would you like to know?** ЁЯЪЬ"""
    
    else:
        response_en = """ЁЯМ╛ **How can I help you today?**

Ask me about:
тАв ЁЯФм Crop disease (upload photo)
тАв ЁЯТ░ Market prices
тАв ЁЯМдя╕П Weather updates
тАв ЁЯМ▒ Crop tips

**Type your question!** ЁЯЪЬ"""
    
    # Translate response back to user's language
    if user_lang != 'en':
        return translate_text(response_en, target_lang=user_lang)
    
    return response_en

# ---------------------- SIDEBAR ----------------------
with st.sidebar:
    st.markdown(f"""
    <div style="padding: 1.5rem 0 1.5rem 0; border-bottom: 1px solid rgba(76, 175, 80, 0.2);">
        <h2 style="font-size: 1.3rem; font-weight: 800; color: #66bb6a; margin: 0;">ЁЯМ╛ {get_ui_text('app_title', current_lang)}</h2>
        <p style="font-size: 0.8rem; color: #81c784; margin: 0.4rem 0 0 0;">{get_ui_text('smart_assistant', current_lang)}</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown(f"### {get_ui_text('quick_actions', current_lang)}")
    
    if st.button(get_ui_text('disease_detection', current_lang)):
        user_msg = get_ui_text('check_disease', current_lang)
        st.session_state.messages.append({"role": "user", "content": user_msg})
        bot_response = get_bot_response(user_msg, st.session_state.selected_language)
        st.session_state.messages.append({"role": "assistant", "content": bot_response})
        st.rerun()
    
    if st.button(get_ui_text('delhi_prices', current_lang)):
        user_msg = f"{get_ui_text('show_prices', current_lang)} Delhi"
        st.session_state.messages.append({"role": "user", "content": user_msg})
        bot_response = get_bot_response(user_msg, st.session_state.selected_language)
        st.session_state.messages.append({"role": "assistant", "content": bot_response})
        st.rerun()
        
    if st.button(get_ui_text('mumbai_weather', current_lang)):
        user_msg = f"{get_ui_text('weather_in', current_lang)} Mumbai"
        st.session_state.messages.append({"role": "user", "content": user_msg})
        bot_response = get_bot_response(user_msg, st.session_state.selected_language)
        st.session_state.messages.append({"role": "assistant", "content": bot_response})
        st.rerun()
        
    if st.button(get_ui_text('crop_tips', current_lang)):
        user_msg = get_ui_text('tell_about', current_lang)
        st.session_state.messages.append({"role": "user", "content": user_msg})
        bot_response = get_bot_response(user_msg, st.session_state.selected_language)
        st.session_state.messages.append({"role": "assistant", "content": bot_response})
        st.rerun()
    
    st.divider()
    
    if st.button(get_ui_text('clear_chat', current_lang)):
        st.session_state.messages = []
        st.session_state.expect_image = False
        st.rerun()

# ---------------------- CHAT INTERFACE ----------------------
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# ---------------------- IMAGE UPLOAD ----------------------
if st.session_state.expect_image:
    st.subheader(get_ui_text('upload_image', current_lang))
    
    uploaded_file = st.file_uploader(
        get_ui_text('choose_image', current_lang), 
        type=["jpg", "png", "jpeg"]
    )
    
    if uploaded_file:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.image(uploaded_file, caption=get_ui_text('uploaded_image', current_lang), use_container_width=True)
        
        with col2:
            with st.spinner(get_ui_text('analyzing', current_lang)):
                prediction = ai_predict_disease(uploaded_file)
                
                st.success(get_ui_text('detection_complete', current_lang))
                st.metric(get_ui_text('disease', current_lang), prediction['name'])
                st.metric(get_ui_text('confidence', current_lang), f"{prediction['confidence']}%")
        
        if st.button(get_ui_text('done', current_lang)):
            st.session_state.expect_image = False
            result_msg = f"""тЬЕ **Disease Detection Complete**

**Identified:** {prediction['name']} ({prediction['confidence']}% confidence)

**Symptoms:** {prediction['symptoms']}

**Treatment:** {prediction['treatment']}"""
            
            if st.session_state.selected_language != 'en':
                result_msg = translate_text(result_msg, target_lang=st.session_state.selected_language)
            
            st.session_state.messages.append({"role": "assistant", "content": result_msg})
            st.rerun()

# ---------------------- CHAT INPUT ----------------------
if prompt := st.chat_input(get_ui_text('chat_placeholder', current_lang)):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    with st.chat_message("assistant"):
        with st.spinner(get_ui_text('thinking', current_lang)):
            response = get_bot_response(prompt, st.session_state.selected_language)
            st.markdown(response)
    
    st.session_state.messages.append({"role": "assistant", "content": response})

# ---------------------- FOOTER ----------------------
st.markdown(f"""
<div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%); border-radius: 12px; margin-top: 3rem; border: 1px solid #4caf50;">
    <p style="color: #66bb6a; font-weight: 600; font-size: 1.1rem; margin-bottom: 0.5rem;">{get_ui_text('footer_title', current_lang)}</p>
    <p style="color: #81c784; font-size: 0.9rem; margin-bottom: 0;">{get_ui_text('footer_tagline', current_lang)}</p>
    <p style="color: #a5d6a7; font-size: 0.8rem; margin-top: 1rem;">{get_ui_text('footer_copyright', current_lang)}</p>
</div>
""", unsafe_allow_html=True)
